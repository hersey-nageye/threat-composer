name: Terraform Security Scan and Plan

on:
  push:
    branches: [ main ]
    paths: 
      - 'terraform/**' 
      - '.github/workflows/terraform-*.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'

env:
  AWS_REGION: eu-west-2  
  TF_VERSION: 1.11.2    

jobs:
  terraform-scan-and-plan:
    name: Security Scan and Terraform Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform  
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Python for Checkov
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Checkov
      run: |
        pip install checkov
        
    - name: Run Checkov security scan
      run: |
        checkov -d . --framework terraform --output cli --output junitxml --output-file-path console,checkov-report.xml
      continue-on-error: true  
      
    - name: Upload Checkov results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: checkov-report
        path: terraform/checkov-report.xml
        
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: v0.48.0
        
    - name: Show TFLint version
      run: tflint --version
      
    - name: Init TFLint
      run: tflint --init
      
    - name: Run TFLint
      run: tflint -f compact
      
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true
      
    - name: Terraform Init
      run: |
        terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
                       -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
                       -backend-config="region=${{ env.AWS_REGION }}"
                       
    - name: Terraform Validate
      run: terraform validate
      
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -out=tfplan
        terraform show -no-color tfplan > tfplan.txt
        
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan.txt
        
    - name: Comment PR with Terraform Plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/tfplan.txt', 'utf8');
          const maxCommentLength = 65536;
          let output = `#### Terraform Plan \n\`\`\`hcl\n${plan}\n\`\`\``;
          
          if (output.length > maxCommentLength) {
            output = `#### Terraform Plan \n\nPlan is too long to display in comment. Please check the uploaded artifact.\n\n**Plan Summary:**\n- Plan file uploaded as artifact\n- Check the Actions tab for detailed plan output`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });
          
    - name: Security Scan Summary
      if: always()
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "### Checkov Results" >> $GITHUB_STEP_SUMMARY
        echo "- Security scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- Check uploaded artifacts for detailed results" >> $GITHUB_STEP_SUMMARY
        echo "### TFLint Results" >> $GITHUB_STEP_SUMMARY
        echo "- Terraform linting completed" >> $GITHUB_STEP_SUMMARY
        echo "### Terraform Plan" >> $GITHUB_STEP_SUMMARY
        echo "- Plan generated successfully" >> $GITHUB_STEP_SUMMARY
        echo "- Plan uploaded as artifact" >> $GITHUB_STEP_SUMMARY